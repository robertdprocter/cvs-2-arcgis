"""
Thames Water Open Data example code in Python.
"""
# PART 1: FETCH DATA FROM API

# Requests handles fetching the data and pandas for data manipulation
#from requests import requests
import requests
import pandas as pd
from io import StringIO

#Import some stuff for Rob
import os
import sys
import convertbng
from convertbng.util import convert_bng, convert_lonlat
import arcgis
import datetime
from datetime import datetime

# add in your API credentials here
clientID = 'b80478ad0bf148ff8f05ddbebc3e3f4a'
clientSecret = '7879A054f7A64788B21b8E22359796fE'

# modify this url as desired to access the different end points. e.g. replace DischargeCurrentStatus at the end of the resource URL
api_root = 'https://prod-tw-opendata-app.uk-e1.cloudhub.io'
api_resource = '/data/STE/v1/DischargeCurrentStatus'
url = api_root + api_resource

# add here any query parameters if using them e.g. date filters, leave as '' for none.
params = '' 

# send the request
r = requests.get(url, headers={'client_id':clientID, 'client_secret': clientSecret}, params=params)
print("Requesting from " + r.url)

# check response status and use only valid requests
if r.status_code == 200:
    response = r.json()
    df = pd.json_normalize(response, 'items')
    print()
    print('Dataframe populated successfully')
else:
    raise Exception("Request failed with status code {0}, and error message: {1}".format(r.status_code, r.json()))

# you can then manipulate the dataframe df as you wish:



# PART 2: CONVERT DATA INTO AN ACCEPTABLE CSV

"""
Rob Content

Needs 'requests', 'pandas', 'convertbng', and 'arcgis' modules, use pip to install.
"""

print('============================================================================')
print('                Arcpublish 1.0: Feature layer updater')
print('============================================================================')

# Return contextual info
print('Entries/Indexes in dataframe: ',(len(df.index)))
print('Fields/Columns in dataframe: ',(len(df.columns)))
print()


# Rename column names, ArcGIS module to publish online requires them to be under 10 characters for csv files.
print('Converting column names...')
df = df.rename(columns={'LocationName':'Name', 'PermitNumber':'PermitNo', 'LocationGridRef':'GridRef', 'ReceivingWaterCourse':'IntoWater', 'AlertStatus':'Alert',
                        'StatusChange': 'Changed', 'AlertPast48Hours':'48Hours', 'MostRecentDischargeAlertStart':'LastStart', 'MostRecentDischargeAlertStop':'LastStop'})
#for col in df.columns:
    #print(col)
print('Successfully converted column names')
print()


# Convert British National Grid coordinates to decimal longitude and latitude
# I am aware that making a list of two values for each index before replacing it is inefficient, something for a future version
print('Converting British National Grid coords to decimal long and lat coords...')
df[['X', 'Y']] = df[['X', 'Y']].astype(float)
for i in df.index:
    #print(df["NAME"][i])
    x_list = [df["X"][i]]
    y_list = [df["Y"][i]]
    converted_list = convert_lonlat(x_list, y_list)
    x_cord = sum(converted_list[0])
    y_cord = sum(converted_list[1])
    df.at[i,"X"] = x_cord
    df.at[i,"Y"] = y_cord
    #print(df["X"][i])
    #print(df["Y"][i])
print('Successfully converted coordinates')
print()
    

# Generate CSV File
path = r'C:\Users\Robert\Desktop\GIS\LondonDrainage\DischargeStatus2.csv'
df.to_csv(path, index=False)
print('Generated new csv file')
print()


# PART 3: PUBLISH THE DATA INTO A SPECIFIC ARCGIS HOSTED FEATURE LAYER

#Set ArcGIS access with address and credentials
gis = arcgis.GIS("https://robp.maps.arcgis.com/home/", "robertdp", "GISMole23", verify_cert=False)
#Set id of the base layer: FETCH THIS FROM THE URL OF THE HOSTED FEATURE LAYER
csv = gis.content.get('7d4fe225ad2344ce865857aa1c30f9a3')
print('ArcGIS accessed')

#Fetch the time
now = datetime.now()
timestring = now.strftime("%d/%m/%Y at %H:%M:%S")

#Set the metadata
layer_title = 'Thames Water Discharge Live Data 2.0'
layer_snippet = 'Layer based on Thames Water, current status of storm discharge activity at permitted locations, measured by event duration monitoring (EDM). Updated every 30 mins.'
layer_description = """This feature point layer presents data on the current status of storm discharge activity at permitted locations within the Thames Water area, measured by Thames Water\'s event duration monitoring (EDM).
                    Each feature point represents a discharge point and includes 10 attributes. The layer does not contain symbology and <u>uses the WGS 1984 coordinate system.</u>
                    <br>
                    <br>
                    <b>Attribute Information:</b>
                    <ul>
                        <li>Name of the discharge point, sometimes this is the address of the discharge point: Name</li>
                        <li>Permit number of the discharge point: PermitNo</li>
                        <li>Ordnance Survey grid reference: GridRef</li>
                        <li>The X coordinate of the discharge point, presented as decimal longitude: X</li>
                        <li>The Y coordinate similarly presented for latitude: Y</li>
                        <li>The water body into which the discharge point discharges water: IntoWater</li>
                        <li>Whether or not the discharge point is currently discharging water: Alert</li>
                        <li>When the discharge status of the discharge point last changed: Changed</li>
                        <li>If the discharge point was discharging water in the last 48 hours: 48Hours</li>
                        <li>When the discharge point last started discharging water: LastStart</li>
                        <li>When the discharge point last stopped discharging water: LastStop</li>
                    </ul>
                    <br>
                    <b>How it works:</b>
                    <br>The layer is updated with new data every hour using Thames Water's own API, and all credit goes to them for collecting this data and making it available. An automated script I authored collects the data from
                    the Thames Water API, converts it to a format that works with ArcGIS and publishes it every 30 mins (the frequency at which Thames Water updates its monitoring). As a result Thames Water is not responsible for
                    this data, as I have adjusted it. The changes can be largely summarised as renaming attribute fields and converting the British National Grid coordinates to longitude/latitude WGS 1984. To make best use of this
                    data you will likely want to adjust the primary symbology of this layer.
                    <br>
                    <br>
                    In the future I may enhance this data with the other data stream in Thames Water's API: the Alert Stream, which alongside the Current Status presented in this layer forms Thames Water's Discharge To Environment (DTE) Data.
                    <br>
                    <br>
                    Recent changes:<br>
                    19/12/23: Updates every 30 minutes instead of every hour now.<br>
                    20/05/24: Fixed broken publishing, rewritten to be more structurally sound, replacing disorganised array of predesessors.<br>
                    <br>
                    For any feedback, questions, requests, or reporting of errors, please email me at: robertdprocter@gmail.com or comment below."""
layer_terms_of_use = 'This data is derived from Thames Water\'s API Portal, and subject to their terms of service, which can be found at: https://data.thameswater.co.uk/s/terms-of-service'
layer_credits = 'Thames Water'
layer_tags = ['UK', 'Water', 'Infrastructure', 'London']

item_prop = {'title' : layer_title,
             'snippet' : layer_snippet,
             'description' : layer_description,
             'licenseInfo' : layer_terms_of_use,
             'accessInformation' : layer_credits,
             'tags' : layer_tags}
print('Metadata set')

#Find the existing hosted csv
existing_table = gis.content.search("DischargeStatus2.csv")
print('Identified existing csv')
#Delete said existing hosted csv
for item in existing_table:
    item.delete()
print('Deleted old CSVs')
#Identify new csv to be updated, the most recently generated on the machine
new_csv = gis.content.add({}, data= r"C:\Users\Robert\Desktop\GIS\LondonDrainage\DischargeStatus2.csv")
print('Identified new csv')
#Set item properties to be changed, this will be updated to include a timestamp.
print('Updating layer...')
new_csv.update(item_properties = item_prop)
#Publish the changes
new_csv.publish(overwrite=True)
#Confirm success
print('Successfully updated layer')

